{"version":3,"sources":["InputForm.js","Result.js","App.js","reportWebVitals.js","index.js"],"names":["InputForm","addResult","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","Result","result","className","App","resultAll","setResultsAll","resultLet","setResultsLet","resultNum","setResultsNum","test","newItemLet","id","Math","random","toString","substr","newItemNum","newItemAll","arrCount","i","indexOf","push","x","count","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAiCeA,MA/Bf,YAAmC,IAAdC,EAAa,EAAbA,UACnB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAKMC,EAAe,SAACC,GACpBA,EAAEC,iBACFN,EAAUE,GACVC,EAAa,KAOf,OACE,uBAAMI,SAAUH,EAAhB,UACE,uBACEI,MAAON,EACPO,KAAK,OACLC,SAlBe,SAACL,GACpBF,EAAaE,EAAEM,cAAcH,QAkBzBI,UAXiB,SAACP,GACR,UAAVA,EAAEQ,KACJT,EAAaC,IAUXS,YAAY,gGAEd,8ECjBSC,MAVf,YAA6B,IAAXC,EAAU,EAAVA,OAChB,OACE,mCACE,mBAAGC,UAAU,eAAb,SACGD,EAAOA,YC6FDE,MA7Ff,WAEE,MAAmCjB,mBAAS,IAA5C,mBAAOkB,EAAP,KAAkBC,EAAlB,KACA,EAAmCnB,mBAAS,IAA5C,mBAAOoB,EAAP,KAAkBC,EAAlB,KACA,EAAmCrB,mBAAS,IAA5C,mBAAOsB,EAAP,KAAkBC,EAAlB,KA2CA,OACE,sBAAKP,UAAU,MAAf,UACE,iCACE,wCAEF,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,cAAC,EAAD,CAAWjB,UA9CD,SAACE,GACjB,GAAI,wCAAoBuB,KAAKvB,GAAY,CACvC,IAAMwB,EAAa,CACjBC,GAAIC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzCf,OAAQd,GAGVoB,EAAc,GAAD,mBAAKD,GAAL,CAAgBK,UACxB,GAAI,UAAUD,KAAKvB,GAAY,CACpC,IAAM8B,EAAa,CACjBL,GAAIC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzCf,OAAQd,GAGVsB,EAAc,GAAD,mBAAKD,GAAL,CAAgBS,UACxB,GAAI,2CAAuBP,KAAKvB,GAAY,CACjD,IAAM+B,EAAa,CACjBN,GAAIC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzCf,OAAQd,GAGVkB,EAAc,GAAD,mBAAKD,GAAL,CAAgBc,KAC7B,IAPiD,EAO3CC,EAAW,GAPgC,cAQnCf,GARmC,IAQjD,2BAAyB,CAAC,IAAjBgB,EAAgB,SACM,IAAzBD,EAASE,QAAQD,IACnBD,EAASG,KAAKF,IAV+B,8BAajD,cAAcD,EAAd,eAAwB,CAAnB,IAAmB,EAAfI,EAAC,KACJC,EAAQ,EADU,cAEZpB,GAFY,IAEtB,4BAAKgB,EAAgB,WACTG,GAAKC,IAHK,8BAKtBpB,EAAUkB,KAAV,UAAkBC,EAAlB,cAAyBC,WAezB,qBAAKtB,UAAU,0BAAf,SAEGI,EAAUmB,KAAI,SAACxB,GACd,OACE,cAAC,EAAD,CACEA,OAAQA,GACHA,EAAOW,SAMpB,qBAAKV,UAAU,2BAAf,SACGM,EAAUiB,KAAI,SAACxB,GACd,OACE,cAAC,EAAD,CACEA,OAAQA,GACHA,EAAOW,SAKpB,qBAAKV,UAAU,4BAAf,SACGE,EAAUqB,KAAI,SAACxB,GACd,OACE,cAAC,EAAD,CACEA,OAAQA,GACHA,EAAOW,gBC3Ebc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8650b08e.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction InputForm({ addResult }) {\r\n  const [userInput, setUserInput] = useState('')\r\n\r\n  const handleChange = (e) => {\r\n    setUserInput(e.currentTarget.value)\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addResult(userInput);\r\n    setUserInput(\"\")\r\n  }\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit(e)\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={userInput}\r\n        type='text'\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyPress}\r\n        placeholder=\"Введите значение\"\r\n      />\r\n      <button>Ввести</button>\r\n\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default InputForm;","function Result({ result }) {\r\n  return (\r\n    <>\r\n      <p className=\"result__text\">\r\n        {result.result}\r\n      </p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Result;","import { useState } from 'react';\nimport InputForm from './InputForm';\nimport Result from './Result';\n\nfunction App() {\n\n  const [resultAll, setResultsAll] = useState([]);\n  const [resultLet, setResultsLet] = useState([]);\n  const [resultNum, setResultsNum] = useState([]);\n\n\n\n  const addResult = (userInput) => {\n    if (/^[A-Za-zА-яа-я]*$/.test(userInput)) {\n      const newItemLet = {\n        id: Math.random().toString(36).substr(2, 9),\n        result: userInput,\n\n      }\n      setResultsLet([...resultLet, newItemLet])\n    } else if (/^[\\d]*$/.test(userInput)) {\n      const newItemNum = {\n        id: Math.random().toString(36).substr(2, 9),\n        result: userInput,\n\n      }\n      setResultsNum([...resultNum, newItemNum])\n    } else if (/^[A-Za-zА-яа-я0-9]*$/.test(userInput)) {\n      const newItemAll = {\n        id: Math.random().toString(36).substr(2, 9),\n        result: userInput,\n\n      }\n      setResultsAll([...resultAll, newItemAll])\n      const arrCount = []\n      for (var i of resultAll) {\n        if (arrCount.indexOf(i) === -1) {\n          arrCount.push(i)\n        }\n      }\n      for (var x of arrCount) {\n        let count = 0;\n        for (i of resultAll) {\n          if (i === x) { count++; }\n        }\n        resultAll.push(`${x} : ${count}`);\n      }\n\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Test</h1>\n      </header>\n      <div className=\"grid\">\n        <div className=\"grid__box grid__box_white\">\n          <InputForm addResult={addResult} />\n        </div>\n        <div className=\"grid__box grid__box_red\">\n\n          {resultLet.map((result) => {\n            return (\n              <Result\n                result={result}\n                key={result.id}\n              />\n            )\n          })}\n\n        </div>\n        <div className=\"grid__box grid__box_blue\">\n          {resultNum.map((result) => {\n            return (\n              <Result\n                result={result}\n                key={result.id}\n              />\n            )\n          })}\n        </div>\n        <div className=\"grid__box grid__box_black\">\n          {resultAll.map((result) => {\n            return (\n              <Result\n                result={result}\n                key={result.id}\n              />\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}